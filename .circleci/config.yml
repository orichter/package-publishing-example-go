default_env: &default_env
  docker:
    - image: cimg/python:3.8.5
  resource_class: small
  environment:
    CANAVERAL_BUILD_SYSTEM: noop
    CANAVERAL_PACKAGE_TOOLS: npm
    CANAVERAL_DEPS: jq

    CANAVERAL_USE_LEGACY_PIPELINE_MODE: "0"
    CANAVERAL_USE_BLUEPRINT_PROXY: "1"

version: 2

install_depencies: &install_depencies
  run:
    name: "Install Dependencies"
    command: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends ${CANAVERAL_DEPS}
bootstrap_certs: &bootstrap_certs
  run:
    name: "Bootstrap Canaveral Certs"
    command: |-
      declare -x CANAVERAL_CERT_DOWNLOAD_URL="${CANAVERAL_CERT_DOWNLOAD_URL:-http://canaveral-engine-api.canaveral-corp.us-west-2.aws/ca}"
      sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/root-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-root-ca.crt"
      sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/intermediate-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-intermediate-ca.crt"
      # A bug in OpenSSL can cause trouble with certificate verification (for example, when downloading
      # golang packages)  Uncomment the next line as a workaround.
      # sudo rm /usr/share/ca-certificates/mozilla/DST_Root_CA_X3.crt
      sudo /usr/sbin/update-ca-certificates
      sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/ca-chain.crt" -O "/tmp/ca-chain.crt"
      cat "/tmp/ca-chain.crt" >> $(python -m certifi)
install_build_tools: &install_build_tools
  run:
    name: Install canaveral-build-tools
    command: |-
      BUILD_TOOLS_VERSION=$(curl -s -L https://canaveral-gatekeeper.canaveral-corp.us-west-2.aws/build_config/build_tools_version | jq -r '.result')
      echo "Using build tools version '${BUILD_TOOLS_VERSION}'"
      pyenv virtualenv canaveral_build
      PYENV_VERSION=canaveral_build pip install --upgrade pip
      PYENV_VERSION=canaveral_build pip install --extra-index-url "https://${CANAVERAL_ARTIFACTORY_READ_USER}:${CANAVERAL_ARTIFACTORY_READ_PASSWORD}@artifactory.dyn.ntnxdpro.com/artifactory/api/pypi/canaveral-legacy-pypi/simple" --trusted-host artifactory.dyn.ntnxdpro.com nutanix-release-engineering-canaveral-build-tools=="${BUILD_TOOLS_VERSION}"
finalize_cert_install: &finalize_cert_install
  run:
    name: Finalize Canaveral Cert Install
    command: |-
      mkdir -p "/tmp/ssl-certs/tmp"
      sudo -E $(pyenv which python) -m canaveral_build_tools.core.setup_ca_chain
      sudo chown -R circleci:circleci /tmp/canaveral_logs
    environment:
      PYENV_VERSION: canaveral_build
create_workspace: &create_workspace
  run:
    name: canaveral/core/scripts/create-workspace.sh
    command: |-
      CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=$(head /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
      echo "export CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}" >> $BASH_ENV
      echo "NONCE: ${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}"
    environment:
      PYENV_VERSION: canaveral_build
install_node: &install_node
  run:
    name: Install node
    command: |-
      CODENAME=$(lsb_release -cs)
      wget https://deb.nodesource.com/node_12.x/pool/main/n/nodejs/nodejs_12.18.4-1nodesource1~${CODENAME}_amd64.deb -O node.deb|| wget https://deb.nodesource.com/node_12.x/pool/main/n/nodejs/nodejs_12.18.4-1nodesource1_amd64.deb -O node.deb
      sudo dpkg -i node.deb
      rm node.deb
      sudo apt-get -y install maven
update_mvn: &update_mvn
  run:
    name: Install Maven
    command: |-
      sudo apt-get -y install maven
setup_build: &setup_build
  run:
    name: Setup Build
    command: |-
      python -m canaveral_build_tools.core.setup_environment
      python -m canaveral_build_tools.core.post_checkout
      python -m canaveral_build_tools.core.dependency_setup
      python -m canaveral_build_tools.core.setup_database

    environment:
      PYENV_VERSION: canaveral_build
run_build: &run_build
  run:
    name: Build
    command: |-
      python -m canaveral_build_tools.core.push_event Build::Started
      python -m canaveral_build_tools.core.build
    environment:
      PYENV_VERSION: canaveral_build
dev_deploy_config: &dev_deploy_config
  run:
    name: Configure Dev Deployment
    command:  |-
      services/deploy/manage-package-deployments.sh dev
    environment:
      BRANCH_FILTER: /^(?!main.*$).*/
      DEPLOY_FROM_TAG: "16.7.0-2"
      DEPLOY_TO_TAG: "0.24.16-7-0"
      #FORCE_DEPLOYMENT_TAG: 16.7.0-SNAPSHOT
test_deploy_config: &test_deploy_config
  run:
    name: Configure Test Deployment
    command:  |-
      services/deploy/manage-package-deployments.sh test
    environment:
      BRANCH_FILTER: /(?:^main$)/
stage_deploy_config: &stage_deploy_config
  run:
    name: Configure Stage Deployment
    command:  |-
      services/deploy/manage-package-deployments.sh stage
    environment:
      TAG_FILTER: /(?:v[0-9]+(\.[0-9]+)+(-rc[0-9]+)?)/
prod_deploy_config: &prod_deploy_config
  run:
    name: Configure Prod Deployment
    command:  |-
      services/deploy/manage-package-deployments.sh prod
    environment:
      TAG_FILTER: /(?:v[0-9]+(\.[0-9]+)+)/

deploy_golang: &deploy_golang
  run:
    name: Deployment to golang repositories
    command:  |-
      services/deploy/deploy-golang.sh
deploy_golang_verify: &deploy_golang_verify
  run:
    name: Verify Golang Deploy
    command:  |-
      services/verify/deploy-golang-verify.sh
deploy_maven: &deploy_maven
  run:
    name: Deployment to maven repositories
    command:  |-
      services/deploy/deploy-maven.sh
deploy_maven_verify: &deploy_maven_verify
  run:
    name: Verify Maven Deploy
    command:  |-
      services/verify/deploy-maven-verify.sh
deploy_npm: &deploy_npm
  run:
    name: Deployment to npm repositories
    command:  |-
      services/deploy/deploy-npm.sh
deploy_npm_verify: &deploy_npm_verify
  run:
    name: Verify NPM Deploy
    command:  |-
      services/verify/deploy-npm-verify.sh
deploy_python: &deploy_python
  run:
    name: Deployment to python repositories
    command:  |-
      services/deploy/deploy-python.sh
verify_private_packages: &verify_private_packages
  run:
    name: Verify Private Packages
    command:  |-
      services/verify/verify-private-packages.sh

jobs:
  dev_build:
    <<: *default_env
    #working_directory: ~/project
    steps:
      - <<: *install_depencies
      - checkout
      - <<: *bootstrap_certs
      #- <<: *install_build_tools
      #- <<: *finalize_cert_install
      #- <<: *create_workspace
      - <<: *install_node
      - <<: *update_mvn
      #- <<: *setup_build
      #- <<: *run_build
      - <<: *dev_deploy_config
      - <<: *verify_private_packages
      # Typically actual deployments should not come out of a test_build
      # but, it may be useful for development purposes.
      # The following lines should be commented out before a merge to master.
      #- <<: *deploy_golang
      #- <<: *deploy_golang_verify
      #- <<: *deploy_maven
      #- <<: *deploy_maven_verify
      - <<: *deploy_npm
      - <<: *deploy_npm_verify
      #- <<: *deploy_python

  test_build:
    <<: *default_env
    #working_directory: ~/project
    steps:
      - <<: *install_depencies
      - checkout
      - <<: *bootstrap_certs
      #- <<: *install_build_tools
      #- <<: *finalize_cert_install
      #- <<: *create_workspace
      - <<: *install_node
      - <<: *update_mvn
      #- <<: *setup_build
      #- <<: *run_build
      - <<: *test_deploy_config
      #- <<: *verify_private_packages

      # Typically actual deployments should not come out of a test_build
      # but occasionally, it may be useful for a semi-manual deployment
      #- <<: *deploy_golang
      #- <<: *deploy_golang_verify
      #- <<: *deploy_maven
      #- <<: *deploy_maven_verify
      #- <<: *deploy_npm
      #- <<: *deploy_npm_verify
      #- <<: *deploy_python

  stage_build:
    <<: *default_env
    steps:
      - <<: *install_depencies
      - checkout
      - <<: *bootstrap_certs
      #- <<: *install_build_tools
      #- <<: *finalize_cert_install
      #- <<: *create_workspace
      - <<: *install_node
      - <<: *update_mvn
      #- <<: *setup_build
      #- <<: *run_build
      - <<: *stage_deploy_config
      - <<: *verify_private_packages
      - <<: *deploy_golang
      - <<: *deploy_golang_verify
      - <<: *deploy_maven
      - <<: *deploy_maven_verify
      - <<: *deploy_npm
      - <<: *deploy_npm_verify
      - <<: *deploy_python
  prod_build:
    <<: *default_env
    steps:
      - <<: *install_depencies
      - checkout
      - <<: *bootstrap_certs
      #- <<: *install_build_tools
      #- <<: *finalize_cert_install
      #- <<: *create_workspace
      - <<: *install_node
      - <<: *update_mvn
      #- <<: *setup_build
      #- <<: *run_build
      - <<: *prod_deploy_config
      - <<: *verify_private_packages
      - <<: *deploy_golang
      - <<: *deploy_golang_verify
      - <<: *deploy_maven
      - <<: *deploy_maven_verify
      - <<: *deploy_npm
      - <<: *deploy_npm_verify
      - <<: *deploy_python

workflows:
  version: 2
  tag_triggered_builds-1:
    jobs:
    - dev_build:
        filters:
          # ignore any commit on any branch by default
          branches:
            ignore: main
    - test_build:
        filters:
          # ignore any commit on any branch by default
          branches:
            only: main
    - stage_build:
        filters:
          # ignore any commit on any branch by default
          branches:
            ignore: /.*/
          # only act on version tags
          tags:
            only: /v([0-9]+)\.([0-9]+)\.([0-9]+)(-rc[0-9]+)$/
    - prod_build:
        filters:
          # ignore any commit on any branch by default
          branches:
            ignore: /.*/
          # only act on version tags
          tags:
            only: /v([0-9]+)\.([0-9]+)\.([0-9]+)/